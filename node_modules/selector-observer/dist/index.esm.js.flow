/* @flow strict */

declare export default class SelectorObserver {
  constructor(rootNode: Node): SelectorObserver;
  disconnect(): void;
  observe: Observe;
}

// Valid observe() call signatures.
type ObserveA = (string, InitializerCallback<Element>) => Observer
type ObserveB = <T: Element>(string, Options<T>) => Observer
type ObserveC = <T: Element>(Options<T>) => Observer
type Observe = ObserveA & ObserveB & ObserveC

// Public: Install document observer.
//
//   observe('.foo', {
//     add(el) { console.log(el, 'was added to the document') }
//     remove(el) { console.log(el, 'was removed from the document') }
//   })
//
declare export var observe: Observe

// Valid observe handlers.
type Options<T: Element> =
  | {|
      constructor: Class<T>,
      selector?: string,
      initialize?: InitializerCallback<T>,
      add?: AddCallback<T>,
      remove?: RemoveCallback<T>,
      subscribe?: SubscribeCallback<T>
    |}
  | {|
      selector?: string,
      initialize?: InitializerCallback<Element>,
      add?: AddCallback<Element>,
      remove?: RemoveCallback<Element>,
      subscribe?: SubscribeCallback<Element>
    |}

// Valid function type for observer add() callback.
//
//   add(el) { console.log(el, 'was added to the document') }
//
type AddCallback<T: Element> = (el: T) => void

// Valid function type for observer remove() callback.
//
//   remove(el) { console.log(el, 'was removed from the document') }
//
type RemoveCallback<T: Element> = (el: T) => void

// Valid function type for observer initialize() callback.
//
//   initialize(el) { console.log(el, 'was added to the document for the first time') }
//
type InitializerCallback<T: Element> = (el: T) => void | InitializerCallbacks<T>

// Valid function type for observer subscribe() callback.
//
//   subscribe(el) { return listen(el, 'click').subscribe() }
//
type SubscribeCallback<T: Element> = (el: T) => Subscription

// Callbacks may also be dynamically defined in an initializer callback to create
// a closure around shared state.
//
//   initialize(el) {
//     let counter = 0
//     return {
//       add() { counter++ },
//       remove() { counter-- }
//     }
//   }
//
type InitializerCallbacks<T: Element> = {|
  add?: AddCallback<T>,
  remove?: RemoveCallback<T>
|}

// After installing an observer, an object is returned with a `abort()` function
// to clean up the observer.
type Observer = {|
  // const observer = observe('.foo', {})
  // observer.abort()
  abort: () => void
|}

// Proposed TC39 Subscription interface
interface Subscription {
  unsubscribe(): void;
}
